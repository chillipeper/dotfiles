#!/bin/bash

BIN_DIR=$(dirname $(echo $0))
VIRTUAL_ENV=$(pipenv --venv)
SESSION=$(basename $PWD)


#---  FUNCTION  ----------------------------------------------------------------
#          NAME: create_tmux_session
#   DESCRIPTION: Create or load a tmux session if its a sym link to the repo
#    PARAMETERS: None
#       RETURNS: SESSION_PRESENT
#-------------------------------------------------------------------------------
create_tmux_session ()
{
	if [ -h "$BIN_DIR/create_tmux_session" ]; then
		# By sourcing it, script imports variables from previous script
		. $BIN_DIR/create_tmux_session $SESSION
	else
		echo "Script can't continute, could not create or load tmux session"
		exit 1
	fi
}	# ----------  end of function create_tmux_session  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  load_pip_file
#   DESCRIPTION:  copy pip file to working dir if its a symbolic link to the repo
#    PARAMETERS:  None
#       RETURNS:  None
#-------------------------------------------------------------------------------
load_pip_file ()
{
	if [ -h "$BIN_DIR/py3-dev.pipfile" ]; then
		cp $BIN_DIR/py3-dev.pipfile $PWD/Pipfile
	else
		echo "Script can't continute, could not find py3 development pipfile"
		exit 1
	fi

}	# ----------  end of function load_pip_file  ----------


#---  FUNCTION  ----------------------------------------------------------------
#          NAME: install_virtual_env
#   DESCRIPTION: Install virtual env if not pressent
#    PARAMETERS: None
#       RETURNS: None
#-------------------------------------------------------------------------------

install_virtual_env ()
{
	if [ -z "$VIRTUAL_ENV" ]; then
		if [ ! -f "$PWD/Pipfile" ]; then
			load_pip_file
		fi
		pipenv install --dev

		# Eventually might need this kernel for jupyterlab
		pipenv run python -m ipykernel install --user --name=$(pipenv --venv | cut -d/ -f7)
	fi
}	# ----------  end of function install_virtual_env  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  init_tmux_workspace
#   DESCRIPTION:  Initialize workspace in tmux
#    PARAMETERS:  None
#       RETURNS:  None
#-------------------------------------------------------------------------------
init_tmux_workspace ()
{
	if [ "$SESSION_PRESENT" = false ]; then
		tmux rename-window -t $SESSION:1 vim
		tmux new-window -t $SESSION -a -n terminal
		tmux split-window -t $SESSION -v
		tmux new-window -t $SESSION -a -n ssh_sessions
		tmux split-window -t $SESSION -v
		tmux send-keys -t $SESSION:vim "pipenv shell" 'Enter'
		sleep 1
		tmux send-keys -t $SESSION:terminal.1 "pipenv shell" 'Enter'
		sleep 1
		tmux send-keys -t $SESSION:terminal.1 ipython 'Enter'
		sleep 1
		tmux send-keys -t $SESSION:terminal.2 "pipenv shell" 'Enter'
		sleep 1
		tmux send-keys -t $SESSION:vim "vim $(fzf)" 'Enter'
		sleep 1
		tmux select-window -t $SESSION:vim
	fi


	# We use $TMUX to identify if we are on a tmux session already or not
	if [ -z $TMUX ]; then
		tmux -2 attach -t $SESSION
	else
		echo "Switching to session -t $SESSION"
		tmux -2 switch-client -t $SESSION
	fi
}	# ----------  end of function init_workspace  ----------

main ()
{
	create_tmux_session
	install_virtual_env
	init_tmux_workspace
}	# ----------  end of function main  ----------

main
